// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2tsT8n6ajku6fYy574xJGC
// Component: 5x_zscearfVR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: 1ta5oc5TMneu/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Button from "../../Button"; // plasmic-import: 8PsRWvqqX1ul/component
import BookCard from "../../BookCard"; // plasmic-import: OmcuK4nP7Urt/component

import { useScreenVariants as useScreenVariantsfgBKdN0OGx3G } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fgBKdN0OGx3g/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 2tsT8n6ajku6fYy574xJGC/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 5x_zscearfVR/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: aPSFDa_zyml2/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: J9NHYDAQodjO/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfgBKdN0OGx3G()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          {(() => {
            const child$Props = {
              autoplay: true,
              beforeChange: generateStateOnChangePropForCodeComponents(
                $state,
                "currentSlide",
                ["sliderCarousel", "currentSlide"],
                SliderWrapper_Helpers
              ),
              centerMode: false,
              className: classNames("__wab_instance", sty.sliderCarousel),
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"],
              variableWidth: false,
              vertical: false
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],
              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___3AQwM)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zvv0D)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://placehold.co/2000x500"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__iuNRd)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___7GIjv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://placehold.co/2000x500"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rHzBg)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___1IUh)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://placehold.co/2000x500"}
                  />
                </div>
              </SliderWrapper>
            );
          })()}
          <div className={classNames(projectcss.all, sty.freeBox__a9Ir)}>
            <div className={classNames(projectcss.all, sty.freeBox__wCI0)}>
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__bzMbh
                )}
              >
                {"\u6700\u65b0\u4e0a\u67b6 NEW ARRIVAL"}
              </h4>
              <Button
                className={classNames("__wab_instance", sty.button__amqQc)}
                size={"compact"}
              >
                {"\u67e5\u770b\u5168\u90e8"}
              </Button>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__iLy2G)}>
              <BookCard
                className={classNames("__wab_instance", sty.bookCard__nsgo2)}
                image={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ikIBb)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={"https://placehold.co/200x300"}
                  />
                }
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__m1Sxr)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard___075I8)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard___2Ff8)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__t1Bg)}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zjPah)}>
            <div className={classNames(projectcss.all, sty.freeBox__cHho3)}>
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__nzOj
                )}
              >
                {"\u6700\u65b0\u4e0a\u67b6 NEW ARRIVAL"}
              </h4>
              <Button
                className={classNames("__wab_instance", sty.button__cn3Ua)}
                size={"compact"}
              >
                {"\u67e5\u770b\u5168\u90e8"}
              </Button>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__by709)}>
              <BookCard
                className={classNames("__wab_instance", sty.bookCard___26Ydd)}
                image={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___88HUp)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={"https://placehold.co/200x300"}
                  />
                }
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__qd6X2)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__dos1)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__qgfnz)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__ox2No)}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___9GkEv)}>
            <div className={classNames(projectcss.all, sty.freeBox__l6ZU)}>
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__aDyJv
                )}
              >
                {"\u6700\u65b0\u4e0a\u67b6 NEW ARRIVAL"}
              </h4>
              <Button
                className={classNames("__wab_instance", sty.button__bhp70)}
                size={"compact"}
              >
                {"\u67e5\u770b\u5168\u90e8"}
              </Button>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4Hkw0)}>
              <BookCard
                className={classNames("__wab_instance", sty.bookCard__wsRr)}
                image={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__d2Ibn)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={"https://placehold.co/200x300"}
                  />
                }
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__qpTOp)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__gEwsb)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard__eSsx)}
              />

              <BookCard
                className={classNames("__wab_instance", sty.bookCard___4Rtnz)}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__eK29)} />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "sliderCarousel"],
  navbar: ["navbar"],
  sliderCarousel: ["sliderCarousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  sliderCarousel: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
